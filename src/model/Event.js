/**
 * axxell-api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AxxellApi) {
      root.AxxellApi = {};
    }
    root.AxxellApi.Event = factory(root.AxxellApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Event model module.
   * @module model/Event
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Event</code>.
   * An event registered in the system
   * @alias module:model/Event
   * @class
   */
  var exports = function() {
    var _this = this;










  };

  /**
   * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Event} obj Optional instance to populate.
   * @return {module:model/Event} The populated <code>Event</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('creationTime')) {
        obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
      }
      if (data.hasOwnProperty('eventType')) {
        obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
      }
      if (data.hasOwnProperty('eventId')) {
        obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
      }
      if (data.hasOwnProperty('eventTime')) {
        obj['eventTime'] = ApiClient.convertToType(data['eventTime'], 'String');
      }
      if (data.hasOwnProperty('entityType')) {
        obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
      }
      if (data.hasOwnProperty('entityId')) {
        obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
      }
      if (data.hasOwnProperty('targetEntityType')) {
        obj['targetEntityType'] = ApiClient.convertToType(data['targetEntityType'], 'String');
      }
      if (data.hasOwnProperty('targetEntityId')) {
        obj['targetEntityId'] = ApiClient.convertToType(data['targetEntityId'], 'String');
      }
      if (data.hasOwnProperty('body')) {
        obj['body'] = ApiClient.convertToType(data['body'], 'String');
      }
    }
    return obj;
  }

  /**
   * Read-only
   * @member {String} creationTime
   */
  exports.prototype['creationTime'] = undefined;
  /**
   * Type of event, consumer cannot set recommend
   * @member {module:model/Event.EventTypeEnum} eventType
   */
  exports.prototype['eventType'] = undefined;
  /**
   * Read-only
   * @member {String} eventId
   */
  exports.prototype['eventId'] = undefined;
  /**
   * Read-only
   * @member {String} eventTime
   */
  exports.prototype['eventTime'] = undefined;
  /**
   * Read-only
   * @member {String} entityType
   */
  exports.prototype['entityType'] = undefined;
  /**
   * The user that triggered this event. You are free to choose whatever you like but it has to be consistent. Good examples are email address, internal user id or sha256 hash of these values.
   * @member {String} entityId
   */
  exports.prototype['entityId'] = undefined;
  /**
   * Read-only
   * @member {String} targetEntityType
   */
  exports.prototype['targetEntityType'] = undefined;
  /**
   * Way to identify your product. Use the product id from your shop
   * @member {String} targetEntityId
   */
  exports.prototype['targetEntityId'] = undefined;
  /**
   * Meta information that doesn't fit into above fields. Read-only
   * @member {String} body
   */
  exports.prototype['body'] = undefined;


  /**
   * Allowed values for the <code>eventType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EventTypeEnum = {
    /**
     * value: "view"
     * @const
     */
    "view": "view",
    /**
     * value: "purchase"
     * @const
     */
    "purchase": "purchase",
    /**
     * value: "recommend"
     * @const
     */
    "recommend": "recommend"  };


  return exports;
}));


